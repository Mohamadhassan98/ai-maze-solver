{"version":3,"sources":["FlexBoxContainer.js","FlexBoxItem.js","Node.js","ResultTabs.js","Functions.js","BFSWorker.js","IDSWorker.js","AStarWorker.js","WebWorker.js","App.js","serviceWorker.js","index.js"],"names":["FlexBoxContainer","props","alignItemsSafety","alignContentSafety","justifyContentSafety","justifyItemsSafety","other","alignContent","alignItems","justifyContent","justifyItems","alignItemsSafetyOff","includes","alignContentSafetyOff","justifyContentSafetyOff","justifyItemsSafetyOff","computedProps","Box","children","FlexBoxItem","alignSelfSafety","justifySelfSafety","others","alignSelf","justifySelf","alignSelfSafetyOff","justifySelfSafetyOff","defaultProps","display","flexDirection","flexWrap","flexBasis","MapNode","status","x","y","hasAgent","this","equals","a","b","TabPanel","value","index","Typography","component","role","hidden","id","aria-labelledby","p","a11yProps","makeStyles","theme","root","flexGrow","backgroundColor","palette","background","paper","nextRandom","min","max","Math","floor","random","self","addEventListener","event","t0","performance","now","expanded","count","start","data","goal","board","console","log","result","statusStart","availableStateColors","statusGoal","startX","startY","goalX","goalY","startNode","newNode","goalNode","nodes","forEach","row","node","nodeX","nodeY","push","cloneBoard","frontier","exploredNodes","length","selectNode","shift","computeRouting","possibleMoves","findPossibleMovesAndExpand","outer","i","move","j","findRouteByBFS","startBFSSearch","t1","postMessage","routeToGoal","parentNode","parent","block","empty","DFSVisitedNodes","findRouteByDepthLimitedSearch","limit","cutoffOccurred","variable","pop","state","iterativeDeepeningSearch","startIDSSearch","Map","set","calculateFValue","bestChoice","lowestValueAndKey","delete","computeRoutingToStart","k","value1","values","aStarSearch","startAStarSearch","hypot","calculateHeuristicsValue","obj","m","routeNodeToStart","gValue","WebWorker","worker","code","toString","blob","Blob","Worker","URL","createObjectURL","useStyle","button","width","height","margin","searchButton","Boolean","window","location","hostname","match","ReactDOM","render","classes","resultPath","0","1","2","player","interval","gameMapNodes","setGameMapNodes","shouldResume","Do","playing","is","nodeRow","nodeRowSetter","React","useState","setNode","availableSpeeds","playSpeed","setPlaySpeed","BFSWorker","setBFSWorker","AStarWorker","setAStarWorker","IDSWorker","setIDSWorker","useEffect","bfs","BFSWorkerFile","onmessage","path","time","setPath","I","A","setSearchTime","setExpandedNodeCount","setSearchCost","setSuccessful","setProgress","prevState","ids","IDSWorkerFile","B","aStar","AStarWorkerFile","terminate","setStartNode","setGoalNode","selectionMode","setSelectionMode","isPlaying","setPlaying","errorMessage","setErrorMessage","searchCost","searchTime","expandedNodeCount","searched","setSearched","progress","isSuccessful","play","currentPath","yet","clearInterval","resume","speed","setInterval","stop","setValue","randomFillMap","resetSearch","blockCount","randomStart","randomGoal","blocks","nextBlock","some","prevMap","array","Array","initialMap","Container","maxWidth","style","marginTop","Paper","square","AppBar","position","Tabs","onChange","newValue","reset","aria-label","Tab","label","variant","Button","color","onClick","className","LinearProgress","placeholder","map","key","IconButton","size","disableRipple","mapNode","mapNode1","onNodeClicked","disableFocusRipple","currentSpeed","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f736228c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Box} from \"@material-ui/core\";\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function FlexBoxContainer(props) {\r\n    const {alignItemsSafety, alignContentSafety, justifyContentSafety, justifyItemsSafety, ...other} = props;\r\n    const {alignContent, alignItems, justifyContent, justifyItems} = other;\r\n    const alignItemsSafetyOff = alignItemsSafety === 'off' || !['start', 'flex-start', 'self-start', 'end', 'flex-end', 'self-end', 'center'].includes(alignItems);\r\n    const alignContentSafetyOff = alignContentSafety === 'off' || !['start', 'flex-start', 'end', 'flex-end', 'center'].includes(alignContent);\r\n    const justifyContentSafetyOff = justifyContentSafety === 'off' || !['start', 'flex-start', 'end', 'flex-end', 'center', 'left', 'right'].includes(justifyContent);\r\n    const justifyItemsSafetyOff = justifyItemsSafety === 'off' || !['start', 'flex-start', 'self-start', 'end', 'flex-end', 'self-end', 'center', 'left', 'right'].includes(justifyItems);\r\n    const computedProps = {\r\n        ...other,\r\n        alignItems: alignItemsSafetyOff ? alignItems : `${alignItemsSafety} ${alignItems}`,\r\n        alignContent: alignContentSafetyOff ? alignContent : `${alignContentSafety} ${alignContent}`,\r\n        justifyContent: justifyContentSafetyOff ? justifyContent : `${justifyContentSafety} ${justifyContent}`,\r\n        justifyItems: justifyItemsSafetyOff ? justifyItems : `${justifyItemsSafety} ${justifyItems}`\r\n    };\r\n\r\n    return (\r\n        <Box {...computedProps}>\r\n            {props.children}\r\n        </Box>\r\n    );\r\n}\r\n\r\nFlexBoxContainer.propTypes = {\r\n    ...Box.propTypes,\r\n    display: PropTypes.oneOf(['flex', 'inline-flex']),\r\n    flexDirection: PropTypes.oneOf(['row', 'row-reverse', 'column', 'column-reverse']),\r\n    flexWrap: PropTypes.oneOf(['nowrap', 'wrap', 'wrap-reverse']),\r\n    justifyContent: PropTypes.oneOf(['flex-start', 'flex-end', 'start', 'end', 'left', 'right', 'center', 'space-between', 'space-around', 'space-evenly', 'normal', 'stretch']),\r\n    justifyContentSafety: PropTypes.oneOf(['safe', 'unsafe', 'off']),\r\n    alignItems: PropTypes.oneOf(['stretch', 'flex-start', 'start', 'self-start', 'flex-end', 'end', 'self-end', 'center', 'baseline', 'first baseline', 'last baseline', 'normal']),\r\n    alignItemsSafety: PropTypes.oneOf(['safe', 'unsafe', 'off']),\r\n    alignContent: PropTypes.oneOf(['stretch', 'flex-start', 'start', 'flex-end', 'end', 'center', 'baseline', 'first baseline', 'last baseline', 'space-between', 'space-around', 'space-evenly', 'normal']),\r\n    alignContentSafety: PropTypes.oneOf(['safe', 'unsafe', 'off']),\r\n    justifyItems: PropTypes.oneOf(['stretch', 'flex-start', 'start', 'self-start', 'flex-end', 'end', 'self-end', 'center', 'baseline', 'first baseline', 'last baseline', 'normal', 'left', 'right', 'auto']),\r\n    justifyItemsSafety: PropTypes.oneOf(['safe', 'unsafe', 'off'])\r\n};\r\n\r\nFlexBoxContainer.defaultProps = {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    flexWrap: 'nowrap',\r\n    justifyContent: 'flex-start',\r\n    justifyContentSafety: 'safe',\r\n    alignItems: 'stretch',\r\n    alignItemsSafety: 'safe',\r\n    alignContent: 'stretch',\r\n    alignContentSafety: 'safe',\r\n    justifyItems: 'stretch',\r\n    justifyItemsSafety: 'safe'\r\n};","import React from \"react\";\r\nimport PropTypes, {number, string} from 'prop-types';\r\nimport {Box} from \"@material-ui/core\";\r\n\r\nexport default function FlexBoxItem(props) {\r\n\r\n    const {alignSelfSafety, justifySelfSafety, ...others} = props;\r\n    const {alignSelf, justifySelf} = others;\r\n    const alignSelfSafetyOff = alignSelfSafety === 'off' || !['start', 'flex-start', 'self-start', 'end', 'flex-end', 'self-end', 'center'].includes(alignSelf);\r\n    const justifySelfSafetyOff = justifySelfSafety === 'off' || !['start', 'flex-start', 'self-start', 'end', 'flex-end', 'self-end', 'center', 'left', 'right'].includes(justifySelf);\r\n    const computedProps = {\r\n        ...others,\r\n        alignSelf: alignSelfSafetyOff ? alignSelf : `${alignSelfSafety} ${alignSelf}`,\r\n        justifySelf: justifySelfSafetyOff ? justifySelf : `${justifySelfSafety} ${justifySelf}`\r\n    };\r\n\r\n    return (\r\n        <Box {...computedProps}>\r\n            {props.children}\r\n        </Box>\r\n    );\r\n\r\n}\r\n\r\nFlexBoxItem.propTypes = {\r\n    ...Box.propTypes,\r\n    order: PropTypes.number,\r\n    flexGrow: PropTypes.number,\r\n    flexShrink: PropTypes.number,\r\n    flexBasis: PropTypes.oneOfType([number, string]),\r\n    alignSelf: PropTypes.oneOf(['stretch', 'flex-start', 'start', 'self-start', 'flex-end', 'end', 'self-end', 'center', 'baseline', 'first baseline', 'last baseline', 'normal', 'auto']),\r\n    alignSelfSafety: PropTypes.oneOf(['safe', 'unsafe', 'off']),\r\n    justifySelf: PropTypes.oneOf(['stretch', 'flex-start', 'start', 'self-start', 'flex-end', 'end', 'self-end', 'center', 'baseline', 'first baseline', 'last baseline', 'normal', 'left', 'right', 'auto']),\r\n    justifySelfSafety: PropTypes.oneOf(['safe', 'unsafe', 'off'])\r\n};\r\n\r\nFlexBoxItem.defaultProps = {\r\n    flexBasis: '100%',\r\n    alignSelfSafety: 'safe',\r\n    justifySelfSafety: 'safe'\r\n};","export default class MapNode {\r\n    constructor(status, x, y, hasAgent = false) {\r\n        this.status = status;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.hasAgent = hasAgent;\r\n    }\r\n}\r\n\r\nexport function equals(a, b) {\r\n    if (!a && !b) return true;\r\n    if (!a || !b) return false;\r\n    return a.x === b.x && a.y === b.y;\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nexport function TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <Typography\r\n            component=\"div\"\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`simple-tabpanel-${index}`}\r\n            aria-labelledby={`simple-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && <Box p={3}>{children}</Box>}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nexport function a11yProps(index) {\r\n    return {\r\n        id: `simple-tab-${index}`,\r\n        'aria-controls': `simple-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n}));\r\n\r\nfunction SimpleTabs() {\r\n    const classes = useStyles();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\">\r\n                    <Tab label=\"Item One\" {...a11yProps(0)} />\r\n                    <Tab label=\"Item Two\" {...a11yProps(1)} />\r\n                    <Tab label=\"Item Three\" {...a11yProps(2)} />\r\n                </Tabs>\r\n            </AppBar>\r\n            <TabPanel value={value} index={0}>\r\n                Item One\r\n            </TabPanel>\r\n            <TabPanel value={value} index={1}>\r\n                Item Two\r\n            </TabPanel>\r\n            <TabPanel value={value} index={2}>\r\n                Item Three\r\n            </TabPanel>\r\n        </div>\r\n    );\r\n}","import {availableStateColors} from \"./App\";\r\nimport MapNode from \"./Node\";\r\n\r\nexport function nextRandom(min = 20, max = 50) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport function cloneBoard(start, goal, board) {\r\n    const {start: statusStart, goal: statusGoal} = availableStateColors;\r\n    const {x: startX, y: startY} = start;\r\n    const {x: goalX, y: goalY} = goal;\r\n    const startNode = new MapNode(statusStart, startX, startY);\r\n    const goalNode = new MapNode(statusGoal, goalX, goalY);\r\n    const nodes = [];\r\n    board.forEach(value => {\r\n        const row = [];\r\n        value.forEach(node => {\r\n            const {x: nodeX, y: nodeY, status} = node;\r\n            row.push(new MapNode(status, nodeX, nodeY));\r\n        });\r\n        nodes.push(row);\r\n    });\r\n    return [startNode, goalNode, nodes];\r\n}\r\n\r\n","export default () => {\r\n    // eslint-disable-next-line no-restricted-globals\r\n    self.addEventListener('message', (event) => {\r\n        const t0 = performance.now();\r\n        let expanded = {count: 0};\r\n        const start = event.data[0];\r\n        const goal = event.data[1];\r\n        const board = event.data[2];\r\n        console.log('BFS started.');\r\n        const result = startBFSSearch(start, goal, board, expanded);\r\n        const t1 = performance.now();\r\n        postMessage([result, t1 - t0, expanded.count]);\r\n    });\r\n\r\n    function equals(a, b) {\r\n        if (!a && !b) return true;\r\n        if (!a || !b) return false;\r\n        return a.x === b.x && a.y === b.y;\r\n    }\r\n\r\n    const availableStateColors = {\r\n        empty: '#bbb88b',\r\n        goal: '#4caf50',\r\n        start: '#f50057',\r\n        block: '#3f51b5',\r\n    };\r\n\r\n    function cloneBoard(start, goal, board) {\r\n        const {start: statusStart, goal: statusGoal} = availableStateColors;\r\n        const {x: startX, y: startY} = start;\r\n        const {x: goalX, y: goalY} = goal;\r\n        const startNode = newNode(statusStart, startX, startY);\r\n        const goalNode = newNode(statusGoal, goalX, goalY);\r\n        const nodes = [];\r\n        board.forEach(value => {\r\n            const row = [];\r\n            value.forEach(node => {\r\n                const {x: nodeX, y: nodeY, status} = node;\r\n                row.push(newNode(status, nodeX, nodeY));\r\n            });\r\n            nodes.push(row);\r\n        });\r\n        return [startNode, goalNode, nodes];\r\n    }\r\n\r\n\r\n    function startBFSSearch(start, goal, board, expanded) {\r\n        const result = cloneBoard(start, goal, board);\r\n        const startNode = result[0];\r\n        const goalNode = result[1];\r\n        const nodes = result[2];\r\n        return findRouteByBFS(startNode, goalNode, nodes, expanded);\r\n    }\r\n\r\n    function findRouteByBFS(start, goal, board, expanded) {\r\n        const frontier = [start];\r\n        const exploredNodes = [];\r\n        while (true) {\r\n            if (frontier.length === 0) {\r\n                return null;\r\n            }\r\n            const selectNode = frontier.shift(); // removeAt(0)\r\n            if (equals(selectNode, goal)) {\r\n                return computeRouting(selectNode);\r\n            }\r\n            exploredNodes.push(selectNode);\r\n            expanded.count = expanded.count + 1;\r\n            const possibleMoves = findPossibleMovesAndExpand(selectNode, board);\r\n            outer: for (let i = 0; i < possibleMoves.length; i++) {\r\n                const move = possibleMoves[i];\r\n                for (let j = 0; j < exploredNodes.length; j++) {\r\n                    const explored = exploredNodes[j];\r\n                    if (equals(explored, move)) {\r\n                        continue outer;\r\n                    }\r\n                }\r\n                for (let j = 0; j < frontier.length; j++) {\r\n                    const front = frontier[j];\r\n                    if (equals(front, move)) {\r\n                        continue outer;\r\n                    }\r\n                }\r\n                frontier.push(move);\r\n            }\r\n        }\r\n    }\r\n\r\n    function computeRouting(node) {\r\n        const routeToGoal = [node];\r\n        let parentNode = node.parent;\r\n        while (parentNode) {\r\n            routeToGoal.push(parentNode);\r\n            parentNode = parentNode.parent;\r\n        }\r\n        return routeToGoal;\r\n    }\r\n\r\n    function findPossibleMovesAndExpand(node, board) {\r\n        const {x, y} = node;\r\n        const possibleMoves = [];\r\n        const {block, empty} = availableStateColors;\r\n        if (x + 1 !== 20 && board[x + 1][y].status !== block)\r\n            possibleMoves.push(newNode(empty, x + 1, y, node));\r\n        if (y + 1 !== 20 && board[x][y + 1].status !== block)\r\n            possibleMoves.push(newNode(empty, x, y + 1, node));\r\n        if (x - 1 !== -1 && board[x - 1][y].status !== block)\r\n            possibleMoves.push(newNode(empty, x - 1, y, node));\r\n        if (y - 1 !== -1 && board[x][y - 1].status !== block)\r\n            possibleMoves.push(newNode(empty, x, y - 1, node));\r\n        return possibleMoves;\r\n    }\r\n\r\n    function newNode(status, x, y, parent) {\r\n        return {status: status, x: x, y: y, parent: parent};\r\n    }\r\n\r\n};","export default () => {\r\n    // eslint-disable-next-line no-restricted-globals\r\n    self.addEventListener('message', (event) => {\r\n        const t0 = performance.now();\r\n        let expanded = {count: 0};\r\n        const start = event.data[0];\r\n        const goal = event.data[1];\r\n        const board = event.data[2];\r\n        console.log('IDS Started');\r\n        const result = startIDSSearch(start, goal, board, expanded);\r\n        const t1 = performance.now();\r\n        postMessage([result, t1 - t0, expanded.count]);\r\n    });\r\n\r\n    function equals(a, b) {\r\n        if (!a && !b) return true;\r\n        if (!a || !b) return false;\r\n        return a.x === b.x && a.y === b.y;\r\n    }\r\n\r\n    const availableStateColors = {\r\n        empty: '#bbb88b',\r\n        goal: '#4caf50',\r\n        start: '#f50057',\r\n        block: '#3f51b5',\r\n    };\r\n\r\n    function cloneBoard(start, goal, board) {\r\n        const {start: statusStart, goal: statusGoal} = availableStateColors;\r\n        const {x: startX, y: startY} = start;\r\n        const {x: goalX, y: goalY} = goal;\r\n        const startNode = newNode(statusStart, startX, startY);\r\n        const goalNode = newNode(statusGoal, goalX, goalY);\r\n        const nodes = [];\r\n        board.forEach(value => {\r\n            const row = [];\r\n            value.forEach(node => {\r\n                const {x: nodeX, y: nodeY, status} = node;\r\n                row.push(newNode(status, nodeX, nodeY));\r\n            });\r\n            nodes.push(row);\r\n        });\r\n        return [startNode, goalNode, nodes];\r\n    }\r\n\r\n    function startIDSSearch(start, goal, board, expanded) {\r\n        const result = cloneBoard(start, goal, board);\r\n        const startNode = result[0];\r\n        const goalNode = result[1];\r\n        const nodes = result[2];\r\n        return iterativeDeepeningSearch(startNode, goalNode, nodes, expanded);\r\n    }\r\n\r\n    function findPossibleMovesAndExpand(node, board) {\r\n        const {x, y} = node;\r\n        const possibleMoves = [];\r\n        const {block, empty} = availableStateColors;\r\n        if (x + 1 !== 20 && board[x + 1][y].status !== block)\r\n            possibleMoves.push(newNode(empty, x + 1, y, node));\r\n        if (y + 1 !== 20 && board[x][y + 1].status !== block)\r\n            possibleMoves.push(newNode(empty, x, y + 1, node));\r\n        if (x - 1 !== -1 && board[x - 1][y].status !== block)\r\n            possibleMoves.push(newNode(empty, x - 1, y, node));\r\n        if (y - 1 !== -1 && board[x][y - 1].status !== block)\r\n            possibleMoves.push(newNode(empty, x, y - 1, node));\r\n        return possibleMoves;\r\n    }\r\n\r\n    function iterativeDeepeningSearch(start, goal, board, expanded) {\r\n        let DFSVisitedNodes = [];\r\n\r\n        function findRouteByDepthLimitedSearch(node, limit) {\r\n            expanded.count = expanded.count + 1;\r\n            DFSVisitedNodes.push(node);\r\n            if (equals(goal, node)) {\r\n                return ['success', []];\r\n            } else if (limit === 0) {\r\n                return ['cutoff', []];\r\n            } else {\r\n                let cutoffOccurred = false;\r\n                const possibleMoves = findPossibleMovesAndExpand(node, board);\r\n                outer: for (let i = 0; i < possibleMoves.length; i++) {\r\n                    const move = possibleMoves[i];\r\n                    for (let j = 0; j < DFSVisitedNodes.length; j++) {\r\n                        const visitedNode = DFSVisitedNodes[j];\r\n                        if (equals(visitedNode, move)) {\r\n                            continue outer;\r\n                        }\r\n                    }\r\n                    const variable = findRouteByDepthLimitedSearch(move, limit - 1);\r\n                    const status = variable[0];\r\n                    const result = variable[1];\r\n                    DFSVisitedNodes.pop();\r\n                    if (status === 'cutoff') {\r\n                        cutoffOccurred = true;\r\n                    } else if (status === 'success') {\r\n                        const nodes = [];\r\n                        for (let i = 0; i < result.length; i++) {\r\n                            nodes.push(result[i]);\r\n                        }\r\n                        nodes.push(move);\r\n                        return ['success', nodes];\r\n                    }\r\n                }\r\n                if (cutoffOccurred) {\r\n                    return ['cutoff', []];\r\n                } else {\r\n                    return ['failure', []];\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < 40; i++) {\r\n            const variable = findRouteByDepthLimitedSearch(start, i);\r\n            const state = variable[0];\r\n            const result = variable[1];\r\n            if (state === 'success') {\r\n                return [...result, start];\r\n            } else {\r\n                DFSVisitedNodes = [];\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n\r\n    function newNode(status, x, y, parent) {\r\n        return {status: status, x: x, y: y, parent: parent};\r\n    }\r\n};\r\n","export default () => {\r\n    // eslint-disable-next-line no-restricted-globals\r\n    self.addEventListener('message', (event) => {\r\n        const t0 = performance.now();\r\n        let expanded = {count: 0};\r\n        const start = event.data[0];\r\n        const goal = event.data[1];\r\n        const board = event.data[2];\r\n        console.log('A* started.');\r\n        const result = startAStarSearch(start, goal, board, expanded);\r\n        const t1 = performance.now();\r\n        postMessage([result, t1 - t0, expanded.count]);\r\n    });\r\n\r\n    function newNode(status, x, y, parent) {\r\n        return {status: status, x: x, y: y, parent: parent};\r\n    }\r\n\r\n    function equals(a, b) {\r\n        if (!a && !b) return true;\r\n        if (!a || !b) return false;\r\n        return a.x === b.x && a.y === b.y;\r\n    }\r\n\r\n    const availableStateColors = {\r\n        empty: '#bbb88b',\r\n        goal: '#4caf50',\r\n        start: '#f50057',\r\n        block: '#3f51b5',\r\n    };\r\n\r\n    function cloneBoard(start, goal, board) {\r\n        const {start: statusStart, goal: statusGoal} = availableStateColors;\r\n        const {x: startX, y: startY} = start;\r\n        const {x: goalX, y: goalY} = goal;\r\n        const startNode = newNode(statusStart, startX, startY);\r\n        const goalNode = newNode(statusGoal, goalX, goalY);\r\n        const nodes = [];\r\n        board.forEach(value => {\r\n            const row = [];\r\n            value.forEach(node => {\r\n                const {x: nodeX, y: nodeY, status} = node;\r\n                row.push(newNode(status, nodeX, nodeY));\r\n            });\r\n            nodes.push(row);\r\n        });\r\n        return [startNode, goalNode, nodes];\r\n    }\r\n\r\n    function startAStarSearch(start, goal, board, expanded) {\r\n        const variable = cloneBoard(start, goal, board);\r\n        const startNode = variable[0];\r\n        const goalNode = variable[1];\r\n        const nodes = variable[2];\r\n        return aStarSearch(startNode, goalNode, nodes, expanded);\r\n    }\r\n\r\n    function calculateFValue(node, goal) {\r\n        return calculateHeuristicsValue(node, goal) + computeRoutingToStart(node)[1];\r\n    }\r\n\r\n    function calculateHeuristicsValue(node, goal) {\r\n        return Math.hypot((node.x - goal.x), (node.y - goal.y))\r\n    }\r\n\r\n    function lowestValueAndKey(obj) {\r\n        let min;\r\n        for (let m of obj) {\r\n            min = m;\r\n            break;\r\n        }\r\n        for (let m of obj) {\r\n            if (m[1] < min[1]) {\r\n                min = m;\r\n            }\r\n        }\r\n        return min;\r\n    }\r\n\r\n    function aStarSearch(start, goal, board, expanded) {\r\n        const frontier = new Map();\r\n        frontier.set(start, calculateFValue(start, goal));\r\n        while (true) {\r\n            const bestChoice = lowestValueAndKey(frontier)[0];\r\n            frontier.delete(bestChoice);\r\n            expanded.count = expanded.count + 1;\r\n            if (equals(bestChoice, goal)) {\r\n                return computeRoutingToStart(bestChoice)[0];\r\n            }\r\n            const possibleMoves = findPossibleMovesAndExpand(bestChoice, board);\r\n            outer: for (let k = 0; k < possibleMoves.length; k++) {\r\n                const move = possibleMoves[k];\r\n                for (let value1 in frontier.values()) {\r\n                    // noinspection JSUnfilteredForInLoop\r\n                    if (equals(move, value1))\r\n                        continue outer;\r\n                }\r\n                frontier.set(move, calculateFValue(move, goal));\r\n            }\r\n        }\r\n    }\r\n\r\n    function computeRoutingToStart(node) {\r\n        const routeNodeToStart = [];\r\n        let gValue = 1;\r\n        routeNodeToStart.push(node);\r\n        let parentNode = node.parent;\r\n        while (parentNode != null) {\r\n            routeNodeToStart.push(parentNode);\r\n            parentNode = parentNode.parent;\r\n            gValue++;\r\n        }\r\n        return [routeNodeToStart, gValue];\r\n    }\r\n\r\n    function findPossibleMovesAndExpand(node, board) {\r\n        const {x, y} = node;\r\n        const possibleMoves = [];\r\n        const {block, empty} = availableStateColors;\r\n        if (x + 1 !== 20 && board[x + 1][y].status !== block)\r\n            possibleMoves.push(newNode(empty, x + 1, y, node));\r\n        if (y + 1 !== 20 && board[x][y + 1].status !== block)\r\n            possibleMoves.push(newNode(empty, x, y + 1, node));\r\n        if (x - 1 !== -1 && board[x - 1][y].status !== block)\r\n            possibleMoves.push(newNode(empty, x - 1, y, node));\r\n        if (y - 1 !== -1 && board[x][y - 1].status !== block)\r\n            possibleMoves.push(newNode(empty, x, y - 1, node));\r\n        return possibleMoves;\r\n    }\r\n};","export default class WebWorker {\r\n    constructor(worker) {\r\n        const code = worker.toString();\r\n        const blob = new Blob(['('+code+')()']);\r\n        return new Worker(URL.createObjectURL(blob));\r\n    }\r\n}","import React from 'react';\nimport FlexBoxContainer from \"./FlexBoxContainer\";\nimport FlexBoxItem from \"./FlexBoxItem\";\nimport Button from \"@material-ui/core/Button\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport {Container, LinearProgress} from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography\";\nimport MapNode, {equals} from \"./Node\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DirectionsRunIcon from '@material-ui/icons/DirectionsRun';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport StopIcon from '@material-ui/icons/Stop';\nimport FastRewindIcon from '@material-ui/icons/FastRewind';\nimport FastForwardIcon from '@material-ui/icons/FastForward';\nimport Paper from \"@material-ui/core/Paper\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport {a11yProps, TabPanel} from \"./ResultTabs\";\nimport {nextRandom} from \"./Functions\";\nimport BFSWorkerFile from './BFSWorker.js';\nimport IDSWorkerFile from './IDSWorker.js';\nimport AStarWorkerFile from './AStarWorker.js';\nimport WebWorker from \"./WebWorker\";\n\nconst useStyle = makeStyles(theme => ({\n    button: {\n        width: 64,\n        height: 64,\n        margin: 10\n    },\n    searchButton: {\n        margin: 10\n    }\n}));\n\nexport const availableStateColors = {\n    empty: '#bbb88b',\n    goal: '#4caf50',\n    start: '#f50057',\n    block: '#3f51b5',\n};\n\nexport default function App() {\n    const classes = useStyle();\n\n    const resultPath = {0: [], 1: [], 2: []};\n\n    const player = {interval: null};\n\n    const [gameMapNodes, setGameMapNodes] = [[], []];\n    const shouldResume = {Do: false};\n    const playing = {is: false};\n\n    for (let i = 0; i < 20; i++) {\n        const [nodeRow, nodeRowSetter] = [[], []];\n        for (let j = 0; j < 20; j++) {\n            // eslint-disable-next-line react-hooks/rules-of-hooks\n            const [node, setNode] = React.useState(new MapNode(availableStateColors.empty, i, j));\n            nodeRow.push(node);\n            nodeRowSetter.push(setNode);\n        }\n        gameMapNodes.push(nodeRow);\n        setGameMapNodes.push(nodeRowSetter);\n    }\n\n    const availableSpeeds = [2000, 1000, 500, 250];\n    const [playSpeed, setPlaySpeed] = React.useState(1);\n    const [BFSWorker, setBFSWorker] = React.useState(null);\n    const [AStarWorker, setAStarWorker] = React.useState(null);\n    const [IDSWorker, setIDSWorker] = React.useState(null);\n\n    React.useEffect(() => {\n\n        const bfs = new WebWorker(BFSWorkerFile);\n        bfs.onmessage = (event) => {\n            const [path, time, expanded] = event.data;\n            setPath(([, I, A]) => [path, I, A]);\n            setSearchTime(([, I, A]) => [time, I, A]);\n            setExpandedNodeCount(([, I, A]) => [expanded, I, A]);\n            setSearchCost(([, I, A]) => [path.length, I, A]);\n            setSuccessful(([, I, A]) => [path.length !== 0, I, A]);\n            setProgress(prevState => {\n                switch (prevState) {\n                    case 0:\n                        return 33;\n                    case 33:\n                        return 66;\n                    case 66:\n                        return 100;\n                    default:\n                        return 0;\n                }\n            });\n        };\n        setBFSWorker(bfs);\n\n        const ids = new WebWorker(IDSWorkerFile);\n        ids.onmessage = (event) => {\n            const [path, time, expanded] = event.data;\n            setPath(([B, , A]) => [B, path, A]);\n            setSearchTime(([B, , A]) => [B, time, A]);\n            setExpandedNodeCount(([B, , A]) => [B, expanded, A]);\n            setSearchCost(([B, , A]) => [B, path.length, A]);\n            setSuccessful(([B, , A]) => [B, path.length !== 0, A]);\n            setProgress(prevState => {\n                switch (prevState) {\n                    case 0:\n                        return 33;\n                    case 33:\n                        return 66;\n                    case 66:\n                        return 100;\n                    default:\n                        return 0;\n                }\n            });\n        };\n        setIDSWorker(ids);\n\n        const aStar = new WebWorker(AStarWorkerFile);\n        aStar.onmessage = (event) => {\n            const [path, time, expanded] = event.data;\n            setPath(([B, I,]) => [B, I, path]);\n            setSearchTime(([B, I,]) => [B, I, time]);\n            setExpandedNodeCount(([B, I,]) => [B, I, expanded]);\n            setSearchCost(([B, I,]) => [B, I, path.length]);\n            setSuccessful(([B, I,]) => [B, I, path.length !== 0]);\n            setProgress(prevState => {\n                switch (prevState) {\n                    case 0:\n                        return 33;\n                    case 33:\n                        return 66;\n                    case 66:\n                        return 100;\n                    default:\n                        return 0;\n                }\n            });\n        };\n        setAStarWorker(aStar);\n\n        return () => {\n            bfs.terminate();\n            ids.terminate();\n            aStar.terminate();\n        };\n    }, []);\n\n    const initialMap = () => {\n        const array = Array(20);\n        for (let i = 0; i < 20; i++) {\n            array[i] = Array(20);\n        }\n        for (let i = 0; i < 20; i++) {\n            for (let j = 0; j < 20; j++) {\n                array[i][j] = new MapNode(availableStateColors.empty, i, j, null);\n            }\n        }\n        return array;\n    };\n\n    const [startNode, setStartNode] = React.useState(null);\n    const [goalNode, setGoalNode] = React.useState(null);\n    const [selectionMode, setSelectionMode] = React.useState(null);\n    const [isPlaying, setPlaying] = React.useState(false);\n    const [errorMessage, setErrorMessage] = React.useState('');\n    /////////////////////////////////////////////////////////////BFS, //IDS,///A* /////\n    const [searchCost, setSearchCost] = React.useState(['N/A', \"N/A\", \"N/A\"]);\n    const [searchTime, setSearchTime] = React.useState(['N/A', \"N/A\", \"N/A\"]);\n    const [path, setPath] = React.useState([[], [], []]);\n    const [expandedNodeCount, setExpandedNodeCount] = React.useState(['N/A', \"N/A\", \"N/A\"]);\n    const [searched, setSearched] = React.useState(false);\n    const [progress, setProgress] = React.useState(0);\n    const [isSuccessful, setSuccessful] = React.useState([false, false, false]);\n    // const [player, setPlayer] = React.useState(null);\n\n\n    const play = () => {\n        const currentPath = resultPath[value];\n        let yet = false;\n        for (let i = currentPath.length - 1; i >= 0; i--) {\n            const {x, y, hasAgent} = currentPath[i];\n            const {x: nodeX, y: nodeY, status} = gameMapNodes[x][y];\n            if (!hasAgent) {\n                const newNode = new MapNode(status, nodeX, nodeY, true);\n                setGameMapNodes[x][y](newNode);\n                currentPath[i] = newNode;\n                yet = true;\n                break;\n            }\n        }\n        if (!yet) {\n            shouldResume.Do = false;\n            playing.is = false;\n            setPlaying(prevState => false);\n            clearInterval(player.interval);\n            player.interval = null;\n        }\n    };\n\n    const playPressed = () => {\n        setErrorMessage('');\n        if (playing.is) {\n            return;\n        }\n        if (!searched) {\n            setErrorMessage('Build your map and press \"start search\".');\n            return;\n        }\n        if (path[value].length === 0) {\n            setErrorMessage('Path not found (yet).');\n            return;\n        }\n        if (!shouldResume.Do) {\n            resultPath[0].length = 0;\n            resultPath[1].length = 0;\n            resultPath[2].length = 0;\n            resultPath[0].push(...path[0]);\n            resultPath[1].push(...path[1]);\n            resultPath[2].push(...path[2]);\n        }\n        resume(availableSpeeds[playSpeed]);\n    };\n\n    const stopPressed = () => {\n        setErrorMessage('');\n        shouldResume.Do = true;\n        stop();\n    };\n\n    const resume = (speed) => {\n        player.interval = setInterval(play, speed);\n        playing.is = true;\n        setPlaying(true);\n    };\n\n    const reset = () => {\n        stop();\n        for (let i = 0; i < 20; i++) {\n            for (let j = 0; j < 20; j++) {\n                const {status} = gameMapNodes[i][j];\n                setGameMapNodes[i][j](new MapNode(status, i, j));\n            }\n        }\n        resultPath[0].push(...path[0]);\n        resultPath[1].push(...path[1]);\n        resultPath[2].push(...path[2]);\n    };\n\n    const stop = () => {\n        if (!isPlaying) {\n            return;\n        }\n        setPlaying(prevState => false);\n        clearInterval(player.interval);\n        player.interval = null;\n    };\n\n    const onNodeClicked = (node) => {\n        if (!selectionMode) {\n            return;\n        }\n        setErrorMessage('');\n        resetSearch();\n        switch (selectionMode) {\n            case 'start':\n                if (equals(startNode, node)) {\n                    return;\n                } else if (node.status === availableStateColors.block) {\n                    setErrorMessage('Cannot start from block.');\n                    return;\n                }\n                if (startNode) {\n                    setGameMapNodes[startNode.x][startNode.y](new MapNode(availableStateColors.empty, startNode.x, startNode.y));\n                }\n                const mapNode = new MapNode(availableStateColors.start, node.x, node.y);\n                setGameMapNodes[node.x][node.y](mapNode);\n                setStartNode(mapNode);\n                break;\n            case 'goal':\n                if (equals(goalNode, node)) {\n                    return;\n                } else if (node.status === availableStateColors.block) {\n                    setErrorMessage('Goal cannot be block.');\n                    return;\n                }\n                if (goalNode) {\n                    setGameMapNodes[goalNode.x][goalNode.y](new MapNode(availableStateColors.empty, goalNode.x, goalNode.y));\n                }\n                const mapNode1 = new MapNode(availableStateColors.goal, node.x, node.y);\n                setGameMapNodes[node.x][node.y](mapNode1);\n                setGoalNode(mapNode1);\n                break;\n            case 'block':\n                if (equals(startNode, node)) {\n                    setErrorMessage('Cannot start from block.');\n                    return;\n                }\n                if (equals(goalNode, node)) {\n                    setErrorMessage('Goal cannot be block.');\n                    return;\n                }\n                if (node.status === availableStateColors.block) {\n                    setGameMapNodes[node.x][node.y](new MapNode(availableStateColors.empty, node.x, node.y));\n                    return;\n                }\n                setGameMapNodes[node.x][node.y](new MapNode(availableStateColors.block, node.x, node.y));\n                break;\n            default:\n                break;\n        }\n    };\n\n    const makeMap = () => {\n        return (\n            <FlexBoxContainer flexDirection='column'>\n                {gameMapNodes.map((row, index) =>\n                    <FlexBoxItem key={index}>\n                        <FlexBoxContainer>\n                            {row.map((node, index) =>\n                                <FlexBoxItem key={index}>\n                                    <IconButton\n                                        style={{\n                                            backgroundColor: node.status\n                                        }}\n                                        size='small'\n                                        color='default'\n                                        disableRipple\n                                        onClick={() => onNodeClicked(node)}\n                                        disableFocusRipple>\n                                        <DirectionsRunIcon style={{\n                                            color: node.hasAgent ? null : '#00000000'\n                                        }}/>\n                                    </IconButton>\n                                </FlexBoxItem>\n                            )}\n                        </FlexBoxContainer>\n                    </FlexBoxItem>\n                )}\n            </FlexBoxContainer>\n        );\n    };\n\n    const [value, setValue] = React.useState(0);\n\n    const handleChange = (event, newValue) => {\n        shouldResume.Do = false;\n        reset();\n        setValue(newValue);\n    };\n\n    const startSearch = () => {\n        setErrorMessage('');\n        if (!goalNode || !startNode) {\n            setErrorMessage('Select start and/or goal node first.');\n            return;\n        }\n        setSelectionMode(null);\n        // do search, then\n        BFSWorker.postMessage([startNode, goalNode, gameMapNodes]);\n        IDSWorker.postMessage([startNode, goalNode, gameMapNodes]);\n        AStarWorker.postMessage([startNode, goalNode, gameMapNodes]);\n        setSearched(true);\n    };\n\n    const increaseSpeed = () => {\n        setErrorMessage('');\n        if (playSpeed >= 3) {\n            return;\n        }\n        const currentSpeed = playSpeed;\n        stop();\n        setPlaySpeed(prevState => prevState + 1);\n        resume(availableSpeeds[currentSpeed + 1]);\n    };\n\n    const decreaseSpeed = () => {\n        setErrorMessage('');\n        if (playSpeed <= 0) {\n            return;\n        }\n        const currentSpeed = playSpeed;\n        stop();\n        setPlaySpeed(prevState => prevState - 1);\n        resume(availableSpeeds[currentSpeed - 1]);\n    };\n\n    const randomFillMap = () => {\n        resetSearch();\n        const blockCount = nextRandom();\n        const randomStart = new MapNode(availableStateColors.start, nextRandom(0, 19), nextRandom(0, 19));\n        let randomGoal = new MapNode(availableStateColors.goal, nextRandom(0, 19), nextRandom(0, 19));\n        while (equals(randomStart, randomGoal)) {\n            randomGoal = randomGoal = new MapNode(availableStateColors.goal, nextRandom(0, 19), nextRandom(0, 19));\n        }\n        const blocks = [];\n        while (true) {\n            if (blocks.length === blockCount) {\n                break;\n            }\n            const nextBlock = new MapNode(availableStateColors.block, nextRandom(0, 19), nextRandom(0, 19));\n            if (blocks.some(value1 => equals(value1, nextBlock)) || equals(randomStart, nextBlock) || equals(randomGoal, nextBlock)) {\n                continue;\n            }\n            blocks.push(nextBlock);\n        }\n        const prevMap = [...initialMap()];\n        prevMap[randomStart.x][randomStart.y] = randomStart;\n        prevMap[randomGoal.x][randomGoal.y] = randomGoal;\n        blocks.forEach(value1 => {\n            prevMap[value1.x][value1.y] = value1;\n        });\n        prevMap.forEach((row, x) => row.forEach((node, y) => setGameMapNodes[x][y](node)));\n        setStartNode(randomStart);\n        setGoalNode(randomGoal);\n    };\n\n    const resetSearch = () => {\n        resultPath[0] = [];\n        resultPath[1] = [];\n        resultPath[2] = [];\n        setSearchCost(['N/A', \"N/A\", \"N/A\"]);\n        setSearchTime(['N/A', \"N/A\", \"N/A\"]);\n        setPath([[], [], []]);\n        setExpandedNodeCount(['N/A', \"N/A\", \"N/A\"]);\n        setSearched(false);\n        setProgress(0);\n        setSuccessful([false, false, false]);\n    };\n\n    return (\n        <Container maxWidth='lg'>\n            <FlexBoxContainer justifyContent='space-around' style={{\n                marginTop: '10px'\n            }}>\n                {/* for algorithms and results */}\n                <FlexBoxItem flexBasis={null}>\n                    <FlexBoxContainer flexDirection='column' alignItems='center'>\n                        <FlexBoxItem>\n                            <Paper square>\n                                <AppBar position=\"static\">\n                                    <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\">\n                                        <Tab label=\"BFS\" {...a11yProps(0)} />\n                                        <Tab label=\"IDS\" {...a11yProps(1)} />\n                                        <Tab label=\"A*\" {...a11yProps(2)} />\n                                    </Tabs>\n                                </AppBar>\n                                <TabPanel value={value} index={0}>\n                                    <FlexBoxContainer flexDirection='column'>\n                                        <FlexBoxItem>\n                                            <Typography variant='h6'>\n                                                Search cost: {searchCost[0]}\n                                            </Typography>\n                                        </FlexBoxItem>\n                                        <FlexBoxItem>\n                                            <Typography variant='h6'>\n                                                Search\n                                                time: {searchTime[0]} {searchTime[0] !== 'N/A' && 'milliseconds.'}\n                                            </Typography>\n                                        </FlexBoxItem>\n                                        <FlexBoxItem>\n                                            <Typography variant='h6'>\n                                                Expanded Nodes: {expandedNodeCount[0]}\n                                            </Typography>\n                                        </FlexBoxItem>\n                                        <FlexBoxItem>\n                                            <Typography variant='h6'>\n                                                Found path: {isSuccessful[0] ? 'Yes' : 'No'}\n                                            </Typography>\n                                        </FlexBoxItem>\n                                    </FlexBoxContainer>\n                                </TabPanel>\n                                <TabPanel value={value} index={1}>\n                                    <FlexBoxContainer flexDirection='column'>\n                                        <FlexBoxItem>\n                                            <Typography variant='h6'>\n                                                Search cost: {searchCost[1]}\n                                            </Typography>\n                                        </FlexBoxItem>\n                                        <FlexBoxItem>\n                                            <Typography variant='h6'>\n                                                Search\n                                                time: {searchTime[1]} {searchTime[1] !== 'N/A' && 'milliseconds.'}\n                                            </Typography>\n                                        </FlexBoxItem>\n                                        <FlexBoxItem>\n                                            <Typography variant='h6'>\n                                                Expanded Nodes: {expandedNodeCount[1]}\n                                            </Typography>\n                                        </FlexBoxItem>\n                                        <FlexBoxItem>\n                                            <Typography variant='h6'>\n                                                Found path: {isSuccessful[1] ? 'Yes' : 'No'}\n                                            </Typography>\n                                        </FlexBoxItem>\n                                    </FlexBoxContainer>\n                                </TabPanel>\n                                <TabPanel value={value} index={2}>\n                                    <FlexBoxContainer flexDirection='column'>\n                                        <FlexBoxItem>\n                                            <Typography variant='h6'>\n                                                Search cost: {searchCost[2]}\n                                            </Typography>\n                                        </FlexBoxItem>\n                                        <FlexBoxItem>\n                                            <Typography variant='h6'>\n                                                Search\n                                                time: {searchTime[2]} {searchTime[2] !== 'N/A' && 'milliseconds.'}\n                                            </Typography>\n                                        </FlexBoxItem>\n                                        <FlexBoxItem>\n                                            <Typography variant='h6'>\n                                                Expanded Nodes: {expandedNodeCount[2]}\n                                            </Typography>\n                                        </FlexBoxItem>\n                                        <FlexBoxItem>\n                                            <Typography variant='h6'>\n                                                Found path: {isSuccessful[2] ? 'Yes' : 'No'}\n                                            </Typography>\n                                        </FlexBoxItem>\n                                    </FlexBoxContainer>\n                                </TabPanel>\n                            </Paper>\n                        </FlexBoxItem>\n                        <FlexBoxItem>\n                            <Button\n                                color='default'\n                                onClick={startSearch}\n                                className={classes.searchButton}\n                                variant='contained'>\n                                Start search\n                            </Button>\n                        </FlexBoxItem>\n                        <FlexBoxItem flexBasis={null}>\n                            <LinearProgress value={progress} variant='determinate' placeholder={progress} style={{\n                                width: '400px',\n                                height: '10px'\n                            }}/>\n                        </FlexBoxItem>\n                    </FlexBoxContainer>\n                </FlexBoxItem>\n                {/* for game map / options */}\n                <FlexBoxItem flexBasis={null}>\n                    <FlexBoxContainer flexDirection='column' alignItems='center'>\n                        {/* for game map */}\n                        <FlexBoxItem>\n                            {makeMap()}\n                        </FlexBoxItem>\n                        {/* for play / stop buttons */}\n                        <FlexBoxItem>\n                            <FlexBoxContainer justifyContent='center'>\n                                <FlexBoxItem flexBasis={null}>\n                                    <IconButton onClick={decreaseSpeed}>\n                                        <FastRewindIcon/>\n                                    </IconButton>\n                                </FlexBoxItem>\n                                <FlexBoxItem flexBasis={null}>\n                                    <IconButton color={isPlaying ? 'default' : 'primary'} onClick={stopPressed}>\n                                        <StopIcon/>\n                                    </IconButton>\n                                </FlexBoxItem>\n                                <FlexBoxItem flexBasis={null}>\n                                    <IconButton color={isPlaying ? 'secondary' : 'default'} onClick={playPressed}>\n                                        <PlayArrowIcon/>\n                                    </IconButton>\n                                </FlexBoxItem>\n                                <FlexBoxItem flexBasis={null}>\n                                    <IconButton onClick={increaseSpeed}>\n                                        <FastForwardIcon/>\n                                    </IconButton>\n                                </FlexBoxItem>\n                            </FlexBoxContainer>\n                        </FlexBoxItem>\n                        {/* for Error messages */}\n                        <FlexBoxItem>\n                            <Typography variant='subtitle1' color='error'>\n                                {errorMessage}\n                            </Typography>\n                        </FlexBoxItem>\n                    </FlexBoxContainer>\n                </FlexBoxItem>\n                {/* for map block types */}\n                <FlexBoxItem flexBasis={null}>\n                    <FlexBoxContainer flexDirection='column'>\n                        <FlexBoxItem>\n                            <Button\n                                className={classes.button}\n                                color={selectionMode === 'start' ? 'secondary' : 'default'}\n                                onClick={() => {\n                                    setErrorMessage('');\n                                    if (isPlaying) {\n                                        setErrorMessage(\"Stop playing first.\");\n                                        return;\n                                    }\n                                    setSelectionMode(selectionMode === 'start' ? null : 'start')\n                                }}\n                                variant='contained'>\n                                S\n                            </Button>\n                        </FlexBoxItem>\n                        <FlexBoxItem>\n                            <Button\n                                variant='contained'\n                                onClick={() => {\n                                    setErrorMessage('');\n                                    if (isPlaying) {\n                                        setErrorMessage(\"Stop playing first.\");\n                                        return;\n                                    }\n                                    setSelectionMode(selectionMode === 'goal' ? null : 'goal')\n                                }}\n                                className={classes.button}\n                                style={{\n                                    backgroundColor: selectionMode === 'goal' ? availableStateColors.goal : null\n                                }}\n                            >\n                                G\n                            </Button>\n                        </FlexBoxItem>\n                        <FlexBoxItem>\n                            <Button\n                                variant='contained'\n                                color={selectionMode === 'block' ? 'primary' : 'default'}\n                                onClick={() => {\n                                    setErrorMessage('');\n                                    if (isPlaying) {\n                                        setErrorMessage(\"Stop playing first.\");\n                                        return;\n                                    }\n                                    setSelectionMode(selectionMode === 'block' ? null : 'block')\n                                }}\n                                className={classes.button}>\n                                B\n                            </Button>\n                        </FlexBoxItem>\n                        <FlexBoxItem>\n                            <Button\n                                variant='contained'\n                                onClick={() => {\n                                    setErrorMessage('');\n                                    if (isPlaying) {\n                                        setErrorMessage(\"Stop playing first.\");\n                                        return;\n                                    }\n                                    randomFillMap();\n                                }}\n                                className={classes.button}>\n                                Fill Random\n                            </Button>\n                        </FlexBoxItem>\n                    </FlexBoxContainer>\n                </FlexBoxItem>\n            </FlexBoxContainer>\n        </Container>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}